#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# VORTEX AI Marketplace Pre-commit Hook
# This hook runs various quality checks before allowing commits

echo "🔍 Running pre-commit checks for VORTEX AI Marketplace..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Helper functions
log() {
    echo -e "${GREEN}[HOOK]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# Check if we're in the right directory
if [ ! -f "vortex-ai-marketplace.php" ]; then
    error "Main plugin file not found. Are you in the plugin root directory?"
fi

# 1. PHP Code Standards Check
log "Checking PHP code standards..."
if command -v vendor/bin/phpcs &> /dev/null; then
    if ! vendor/bin/phpcs --standard=WordPress --extensions=php --ignore=*/vendor/*,*/node_modules/* .; then
        error "PHP code standards check failed. Please fix the issues and try again."
    fi
    log "✅ PHP code standards check passed"
else
    warn "PHPCS not found. Skipping PHP code standards check."
fi

# 2. PHP Syntax Check
log "Checking PHP syntax..."
find . -name "*.php" -not -path "./vendor/*" -not -path "./node_modules/*" | while read -r file; do
    if ! php -l "$file" > /dev/null 2>&1; then
        error "PHP syntax error in $file"
    fi
done
log "✅ PHP syntax check passed"

# 3. JavaScript/CSS Linting
log "Checking JavaScript and CSS..."
if command -v npm &> /dev/null && [ -f "package.json" ]; then
    if ! npm run lint --if-present; then
        error "JavaScript/CSS linting failed. Please fix the issues and try again."
    fi
    log "✅ JavaScript/CSS linting passed"
else
    warn "NPM not found or package.json missing. Skipping JS/CSS linting."
fi

# 4. Security Scan for Secrets
log "Scanning for potential secrets..."
# Check for common secret patterns
if git diff --cached --name-only | xargs grep -l "password\|secret\|key\|token" 2>/dev/null | grep -v ".md$" | grep -v ".txt$"; then
    warn "Potential secrets detected in staged files. Please review:"
    git diff --cached --name-only | xargs grep -n "password\|secret\|key\|token" 2>/dev/null | grep -v ".md$" | grep -v ".txt$" || true
    echo "Continue anyway? (y/n)"
    read -r continue
    if [ "$continue" != "y" ]; then
        exit 1
    fi
fi

# 5. Check for TODO/FIXME comments
log "Checking for TODO/FIXME comments..."
if git diff --cached --name-only | xargs grep -l "TODO\|FIXME" 2>/dev/null; then
    warn "TODO/FIXME comments found in staged files:"
    git diff --cached --name-only | xargs grep -n "TODO\|FIXME" 2>/dev/null || true
    echo "Continue anyway? (y/n)"
    read -r continue
    if [ "$continue" != "y" ]; then
        exit 1
    fi
fi

# 6. Check file permissions
log "Checking file permissions..."
if git diff --cached --name-only | xargs ls -la 2>/dev/null | grep -E "^-rwx"; then
    warn "Executable files detected. Please review file permissions:"
    git diff --cached --name-only | xargs ls -la 2>/dev/null | grep -E "^-rwx" || true
fi

# 7. Check for large files
log "Checking for large files..."
large_files=$(git diff --cached --name-only | xargs ls -la 2>/dev/null | awk '$5 > 1048576 {print $9, $5}' || true)
if [ -n "$large_files" ]; then
    warn "Large files detected (>1MB):"
    echo "$large_files"
    echo "Continue anyway? (y/n)"
    read -r continue
    if [ "$continue" != "y" ]; then
        exit 1
    fi
fi

# 8. Check for direct database queries
log "Checking for direct database queries..."
if git diff --cached --name-only | xargs grep -l "mysql_\|mysqli_\|\$wpdb->query" 2>/dev/null | grep "\.php$"; then
    warn "Direct database queries detected. Consider using WordPress database functions:"
    git diff --cached --name-only | xargs grep -n "mysql_\|mysqli_\|\$wpdb->query" 2>/dev/null | grep "\.php$" || true
    echo "Continue anyway? (y/n)"
    read -r continue
    if [ "$continue" != "y" ]; then
        exit 1
    fi
fi

# 9. Run quick PHP unit tests if available
if [ -f "vendor/bin/phpunit" ] && [ -f "phpunit.xml" ]; then
    log "Running quick PHP unit tests..."
    if ! vendor/bin/phpunit --testsuite=unit --stop-on-failure; then
        error "Unit tests failed. Please fix the issues and try again."
    fi
    log "✅ Unit tests passed"
fi

# 10. Check WordPress version compatibility
log "Checking WordPress version compatibility..."
if git diff --cached --name-only | xargs grep -l "add_action\|add_filter\|wp_enqueue" 2>/dev/null | grep "\.php$"; then
    # Check for deprecated functions
    if git diff --cached --name-only | xargs grep -l "mysql_\|ereg\|split\|create_function" 2>/dev/null | grep "\.php$"; then
        warn "Deprecated PHP functions detected. Please update for WordPress compatibility:"
        git diff --cached --name-only | xargs grep -n "mysql_\|ereg\|split\|create_function" 2>/dev/null | grep "\.php$" || true
        echo "Continue anyway? (y/n)"
        read -r continue
        if [ "$continue" != "y" ]; then
            exit 1
        fi
    fi
fi

log "🎉 All pre-commit checks passed!"
echo "Ready to commit. 🚀" 