name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm security audit
      run: npm audit --audit-level=high
      continue-on-error: false
    
    - name: Check for known vulnerabilities
      run: npm audit --audit-level=moderate
      continue-on-error: true

  php-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.1, 8.2, 8.3]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up PHP ${{ matrix.php-version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, intl, gd, xml, dom, json, fileinfo, curl, zip, iconv
        coverage: xdebug
    
    - name: Install Composer dependencies
      run: composer install --no-dev --optimize-autoloader
    
    - name: Run Composer security audit
      run: composer audit --locked
      continue-on-error: false
    
    - name: Run PHP CodeSniffer
      run: vendor/bin/phpcs --standard=WordPress includes/ admin/ public/
    
    - name: Run PHPUnit tests
      run: vendor/bin/phpunit

  frontend-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run JavaScript linting
      run: npm run lint:js

    - name: Build frontend assets
      run: npm run build
    
    - name: Run performance load test
      run: npx artillery run tests/performance/load-test.yml
      continue-on-error: true
    
    - name: Security audit (production dependencies only)
      run: |
        npm ci --omit=dev
        npm audit --audit-level=high

  python-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black
    
    - name: Run Python security audit
      run: |
        pip install safety
        safety check --json
      continue-on-error: false
    
    - name: Code formatting check with Black
      run: |
        black --check --diff server/ tests/
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 server/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. Line length set to 88 (Black's default)
        flake8 server/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Test with pytest - API Stubs
      run: |
        pytest tests/test_api_stubs.py -v --tb=short
    
    - name: Test API endpoint coverage
      run: |
        # Ensure all endpoints return 200
        pytest tests/test_api_stubs.py --maxfail=1 --disable-warnings -q
    
    - name: Start FastAPI server (smoke test)
      run: |
        # Test that the server can start without errors
        timeout 10s uvicorn server.main:app --host 0.0.0.0 --port 8000 &
        sleep 5
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ || exit 1

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        pip install safety bandit
    
    - name: Check for security vulnerabilities
      run: |
        safety check --json
        bandit -r server/ -f json
    
    - name: Secret scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: SAST scan
      uses: github/codeql-action/init@v2
      with:
        languages: 'javascript,python'
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    
    continue-on-error: false

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate API documentation
      run: |
        # Check that API docs exist and are not empty
        test -f docs/api-documentation.md
        test -s docs/api-documentation.md
        echo "âœ… API documentation validation passed"

  penetration-testing:
    runs-on: ubuntu-latest
    needs: [php-tests, frontend-tests, python-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install OWASP ZAP
      run: |
        wget -N https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2_14_0_unix.sh
        chmod +x ZAP_2_14_0_unix.sh
        sudo ./ZAP_2_14_0_unix.sh -q
    
    - name: Start test server
      run: |
        cd server
        pip install -r requirements.txt
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      continue-on-error: false
    
    - name: Run penetration tests
      run: |
        chmod +x tests/pen-test/run-pen-test.sh
        ./tests/pen-test/run-pen-test.sh
      continue-on-error: true